# yamllint disable
name: tests_local

on:
  schedule:
    - cron: "0 1 * * *"
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Set TEST_TIMING_OPTION if local test should be timed. Default is off.
  TEST_TIMING_OPTION: ""

jobs:
  run_tests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4c-multiphysics/4c:main
      options: --user root --env OMPI_ALLOW_RUN_AS_ROOT=1 --env OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
      - name: Create links to 4C
        run: |
          ln -s /home/user/4C/build/ config/4C_build
      - name: Create Python environment
        id: environment
        uses: ./.github/actions/create_python_environment
      - name: Get Python package manager
        run: echo "PYTHON_PACKAGE_MANAGER=${{steps.environment.outputs.ppm}}" >> $GITHUB_ENV
      - name: Code checks
        run: |
          $PYTHON_PACKAGE_MANAGER activate queens

          echo "::group::Run isort..."
          isort --check-only src/* tests
          echo "::endgroup::"

          echo "::group::Run black..."
          black --check src/* tests
          echo "::endgroup::"

          echo "::group::Run pylint..."
          pylint --rcfile=.pylintrc --disable=duplicate-code src/ tests
          echo "::endgroup::"

          echo "::group::Run ruff..."
          ruff check
          echo "::endgroup::"

          echo "::group::Run nbstripout..."
          find . -name '*.ipynb' -exec nbstripout --verify {} +
          echo "::endgroup::"

          # echo "::group::Create code quality report..."
          # pylint src/ tests --rcfile=.pylintrc --output-format=json:pylint_warnings.json --fail-under 0
          # python .gitlab/pipeline_utils/code_quality_creator.py pylint_warnings.json
          # echo "::endgroup::"

          echo "::group::Check compatibility with licenses of dependencies..."
          liccheck -r requirements.txt
          echo "::endgroup::"

          echo "::group::Create an rc file for the license header check..."
          python .gitlab/pipeline_utils/create_licenserc.py --template_file ".gitlab/pipeline_utils/.licenserc_template.yaml" --text_file "license_header.tmpl" --output_file ".licenserc.yaml" --placeholder "license_header"
          echo "::endgroup::"

          echo "::group::Check type hinting with mypy..."
          mypy .
          echo "::endgroup::"
      - name: Check license headers
        uses: apache/skywalking-eyes/header@v0.4.0
      - name: Check conventional commit messages
        uses: webiny/action-conventional-commits@v1.3.0
      - name: Run pytest
        run: |
          $PYTHON_PACKAGE_MANAGER activate queens
          pytest -v -m "unit_tests or integration_tests or integration_tests_fourc" --cov --cov-report=term --cov-report=html:html_coverage_report --cov-report=xml:xml_coverage_report.xml $TEST_TIMING_OPTION --color=yes -o junit_logging=all --junitxml=test_junit.xml
          python .github/xml_summaries_to_md.py test_junit.xml xml_coverage_report.xml >> $GITHUB_STEP_SUMMARY
      - name: Upload coverage report
        uses: actions/upload-pages-artifact@v3
        with:
          name: html-coverage-report
          path: html_coverage_report/
          retention-days: 7
      - name: Publish junit pytest report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "test_junit.xml"
          annotate_only: true
          job_summary: false
